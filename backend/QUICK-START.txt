================================================================================
  🚀 MIGRAÇÃO PARA PRISMA ORM - GUIA RÁPIDO
================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│  PASSO 1: EXECUTAR SCRIPT DE MIGRAÇÃO                                      │
└─────────────────────────────────────────────────────────────────────────────┘

  Windows CMD:
  $ cd server
  $ migrate-to-prisma.bat

  PowerShell:
  $ cd server
  $ .\migrate-to-prisma.ps1

  O script vai:
    ✓ Fazer backup do index.js antigo
    ✓ Instalar dependências do Prisma
    ✓ Gerar o Prisma Client
    ✓ Atualizar o servidor

┌─────────────────────────────────────────────────────────────────────────────┐
│  PASSO 2: SINCRONIZAR SCHEMA COM BANCO EXISTENTE                           │
└─────────────────────────────────────────────────────────────────────────────┘

  $ npm run db:push

  Este comando:
    ✓ Compara schema Prisma com banco Neon
    ✓ Aplica mudanças necessárias
    ✓ NÃO perde dados existentes
    ✓ É SEGURO para produção

┌─────────────────────────────────────────────────────────────────────────────┐
│  PASSO 3: TESTAR LOCALMENTE                                                │
└─────────────────────────────────────────────────────────────────────────────┘

  $ npm run dev

  Verifique:
    ✓ Servidor iniciou sem erros
    ✓ Endpoints funcionando (http://localhost:3001/health)
    ✓ Login/Register funcionando
    ✓ Sem recriação de tabelas nos logs

================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│  ANTES vs DEPOIS                                                            │
└─────────────────────────────────────────────────────────────────────────────┘

  ANTES (PERIGOSO) ❌                  AGORA (SEGURO) ✅
  ─────────────────────────────────    ────────────────────────────────
  • ensureSchema() toda vez           • Sem ensureSchema()
  • CREATE TABLE IF NOT EXISTS        • Schema versionado
  • Índices recriados                 • Índices preservados
  • SQL manual em todo lugar          • Type-safe queries
  • Sem controle de versão            • Git + migrações
  • Risco de perda de dados           • Dados protegidos

================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│  COMANDOS ÚTEIS                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

  Desenvolvimento:
  ────────────────
  $ npm run dev                  # Iniciar servidor (nodemon)
  $ npm run db:studio            # Interface visual do banco
  $ npm run db:migrate:dev       # Criar nova migração
  $ npm run db:generate          # Re-gerar Prisma Client

  Produção:
  ─────────
  $ npm run db:migrate           # Aplicar migrações pendentes
  $ npm start                    # Iniciar servidor (node)

  Debug:
  ──────
  $ npx prisma migrate status    # Ver status das migrações
  $ npx prisma validate          # Validar schema.prisma
  $ npx prisma studio            # Visualizar dados

================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│  ESTRUTURA DE ARQUIVOS                                                      │
└─────────────────────────────────────────────────────────────────────────────┘

  server/
  ├── prisma/
  │   ├── schema.prisma           ← Schema do banco (NOVO)
  │   └── migrations/             ← Histórico de migrações (criado após)
  │
  ├── index.js                    ← Servidor com Prisma (ATUALIZADO)
  ├── index.old.js               ← Backup do servidor antigo
  ├── index.new.js               ← Template do novo servidor
  │
  ├── package.json               ← Scripts atualizados (ATUALIZADO)
  │
  ├── MIGRATION-SUMMARY.md       ← Resumo executivo
  ├── MIGRATION-README.md        ← Documentação completa
  ├── PRISMA-DEPLOY-GUIDE.md     ← Guia de deploy
  └── QUICK-START.txt            ← Este arquivo

================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│  VARIÁVEIS DE AMBIENTE                                                      │
└─────────────────────────────────────────────────────────────────────────────┘

  Certifique-se que o arquivo .env tem:

  DATABASE_URL="postgresql://user:pass@host.neon.tech/db?sslmode=require"
  JWT_SECRET="seu-secret-forte-aqui"
  NODE_ENV="development"
  PORT=3001

================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│  DEPLOY EM PRODUÇÃO                                                         │
└─────────────────────────────────────────────────────────────────────────────┘

  1. Configure variáveis de ambiente no hosting (Vercel, Render, etc.)
  
  2. Build Command:
     npm install && npm run db:generate

  3. Start Command:
     npm run db:migrate && npm start

  4. Deploy!
     ✓ Migrações são aplicadas automaticamente
     ✓ Tabelas NÃO são recriadas
     ✓ Dados preservados

================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│  PROBLEMAS COMUNS                                                           │
└─────────────────────────────────────────────────────────────────────────────┘

  ❓ "Prisma Client não encontrado"
  → npm run db:generate

  ❓ "Não consigo conectar ao banco"
  → Verifique DATABASE_URL no .env

  ❓ "Erro de migração"
  → npm run db:push (força sincronização)

  ❓ "Quero voltar ao sistema antigo"
  → copy index.old.js index.js

================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│  RECURSOS ADICIONAIS                                                        │
└─────────────────────────────────────────────────────────────────────────────┘

  📖 Documentação:
     • MIGRATION-SUMMARY.md     - Resumo executivo
     • MIGRATION-README.md      - Detalhes completos
     • PRISMA-DEPLOY-GUIDE.md   - Guia de deploy

  🌐 Links Úteis:
     • https://www.prisma.io/docs
     • https://www.prisma.io/docs/guides/migrate

================================================================================

  ✨ MIGRAÇÃO COMPLETA!
  
  Seus dados em produção agora estão 100% protegidos contra recriação
  acidental de tabelas. O Prisma gerencia tudo de forma segura e versionada.

  🎉 Boa sorte com o projeto TCC-EyeVital!

================================================================================
